# Question link: https://leetcode.com/problems/perfect-squares/description/?envType=daily-question&envId=2024-02-08
# Good YT Video: https://www.youtube.com/watch?v=HLZLwjzIVGo

# Think of the problem like a decision tree, there's a lot of repeated work. So work bottom-up, not top-down. It's a DP problem

class Solution:
    def numSquares(self, n: int) -> int:

        dp = [n] * (n + 1)
        dp[0] = 0
        
        for target in range(1, n + 1):
            for s in range(1, target + 1):
                square = s * s
                if target - square < 0:
                    break
                dp[target] = min(dp[target], 1 + dp[target - square])
        return dp[n]
