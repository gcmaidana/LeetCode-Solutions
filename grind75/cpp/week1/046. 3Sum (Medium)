// Problem link: https://leetcode.com/problems/3sum/description/

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        std::sort(nums.begin(), nums.end());
        vector<vector<int>> ans;

        for(int i = 0; i < nums.size(); i++)
        {
            int num = nums[i];
            if(i > 0 && num == nums[i - 1])
            {
                continue;
            }

            int l = i + 1;
            int r = nums.size() - 1;
            while(l < r)
            {
                int threeSum = num + nums[l] + nums[r];
                if(threeSum == 0)
                {
                    ans.push_back({num, nums[l], nums[r]});
                    l += 1;
                    while(nums[l] == nums[l - 1] && l < r)
                    {
                        l += 1;
                    }
                }
                else if(threeSum < 0)
                {
                    l += 1;
                }
                else
                {
                    r -= 1;
                }
            } // end of while-loop
        } // end of for-loop

        return ans;
    }
};
