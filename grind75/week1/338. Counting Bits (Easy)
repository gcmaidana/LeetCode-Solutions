# Question link: https://leetcode.com/problems/counting-bits/description/

# Just count the 1s at each integer from 0 to n (inclusive) by bit shifting to the right and counting the 1s of each integer
# This solution is inefficient, but straightforward

class Solution:
    def countBits(self, n: int) -> List[int]:
        ans = []
        for num in range(n + 1):
            count = 0
            while num != 0:
                if num & 1 == 1:
                    count += 1
                num = num >> 1
            ans.append(count)
        return ans

# Efficient O(n) solution

class Solution:
    def countBits(self, n: int) -> List[int]:

        if n == 0:
            return [0]
        
        dp = [0] * (n + 1)
        dp[1] = 1
        next_power_of_two = 2
        previous_power_of_two = 2

        for i in range(2, n + 1):
            if i == next_power_of_two:
                previous_power_of_two = next_power_of_two
                next_power_of_two = next_power_of_two << 1
            dp[i] = 1 + dp[i - previous_power_of_two]
        return dp
            



        # 0  =  0000    2^0
        # 1  =  0001

        # 2  =  0010    2^1
        # 3  =  0011

        # 4  =  0100    2^2
        # 5  =  0101
        # 6  =  0110
        # 7  =  0111


        # 8  =  1000    2^3 = 8, right here we would do 1 + [0-8]
        # 9  =  1001 
        # 10 =  1010
        # 11 =  1011
        # 12 =  1100    
        # 13 =  1101
        # 14 =  1110
        # 15 =  1111

        # 16 = 10000    2^4
        # 1 + [0-16]    2^16 = 32

        # Can we derive a formula knowing this?
        # Yes..
        # for a given number x, 1 + array[x - the power of 2 we're on]
        # For example for 9, we would do 1 + index[9-3] (We're on 3rd power of 2, e.g. 2^3)
        # Ok.. so we do 1 + index[4]
        # index[4] is 0100
        # 1 + 0100 is 1100. That's correct

        # Let's try 13 now
        # 1 + index[13-8] = 1 + index[5] = 1 + 0101 = 1101
        
                
