# Question link: https://leetcode.com/problems/insert-interval/description/

# I had a decent approach, but my code was too messy with the case handling. This code is much cleaner, but I had some help on it.

# I really like this solution, but technically I don't think it's correct. I believe you have to do this insertion in place because the problem statement says "return intervals after the insertion"
# This is NeetCode's answer. It seems the requirements of the problem have changed over time.

 
class Solution:
    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        res = []
        start = 0
        end = 1
        for i in range(len(intervals)):
            if newInterval[end] < intervals[i][start]: # handle case where new interval comes before but doesnt overlap
                res.append(newInterval)
                return res + intervals[i:]
            elif newInterval[start] > intervals[i][end]: # handle case where new interval comes after but doesnt overlap (yet)
                res.append(intervals[i])
            else: # if we dont enter if or elif then we have an overlap occurring
                
                # This interval thus far can continue to overlap with the next interval in the list of intervals,
                # so we don't want to append it just yet
                newInterval = [min(intervals[i][start], newInterval[start]), max(intervals[i][end], newInterval[end])]

        res.append(newInterval)
        
        return res

# In place solution

class Solution:
    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        start = i = 0
        end = 1
        while i < len(intervals):
            if newInterval[start] <= intervals[i][end]:
                if newInterval[end] < intervals[i][start]:
                    break
                newInterval[start] = min(newInterval[start], intervals[i][start])
                newInterval[end] = max(newInterval[1], intervals[i][end])
                intervals.pop(i)
            else:
                i += 1
        intervals.insert(i, newInterval)
        return intervals

        


        
