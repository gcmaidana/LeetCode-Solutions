# Question link: https://leetcode.com/problems/course-schedule/
# yt: https://www.youtube.com/watch?v=EgI5nU9etnU

# So we have a graph, and if a cycle exists, then we have an issue because
# it means if require course a to take course b but we require course b to take course a (even if not directly)
# for ex:
# a -> b
# b -> c
# c -> a

# we have a hashmap
# key = course
# value is the prerequisite
# so for [0, 1], you need 1 (b1) to take 0 (a1), so 1 is value, 0 is the key

# so we use a hashmap essentially to set up our graph
# and we use a visited set to know if we have a cycle in our graph when we look through the nodes

class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:

        courseMap = { i:[] for i in range(numCourses)} # map every course to an empty list
        visited = set()

        for course, prereq in prerequisites:
                courseMap[course].append(prereq)
            
        def dfs(curr_course):
            if curr_course in visited:
                return False

            if courseMap[curr_course] == []:
                return True # no prereqs
            
            visited.add(curr_course)

            for prereq in courseMap[curr_course]:
                if not dfs(prereq): return False # basically if a loop exists when checking prereqs of a course

            visited.remove(curr_course)
            courseMap[curr_course] = [] # set to empty list for prereq since no issue arose
            return True

        for i in range(numCourses):
            if not dfs(i): return False
        
        return True
        
