# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

# The problem statement goes on to ask if the solution can be solved in O(n) time and O(1) space.
# This is my original solution in O(n) time but O(n) space, so this isn't optimal
class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:

        dummyNode

        while head is not None:
            some_list.append(head.val)
            head = head.next
        n = len(some_list)
        return some_list == some_list[::-1]


# Optimal approach, O(N) time, O(1) space
#
