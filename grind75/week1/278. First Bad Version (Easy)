# The isBadVersion API is already defined for you.
# def isBadVersion(version: int) -> bool:

# Question link: https://leetcode.com/problems/first-bad-version/

# Notes: My initial thoughts are to use binary search since we can locate the bad version fast without
# checking every single version to see if it's bad or good (since we need to minimize API calls)
# With this in mind, we need to find the first bad version

# Now let me explain the while loop, basically
# if we arrive at a mid point that is an F (bad version), we set right pointer at that mid
# Additionally, if our mid is a T (good version), then we set our left pointer at that mid + 1
# we continue to loop until our left point is not less than our right pointer
#
# You can visualize this very easily just by running the algorithm visual on an example input that is drawn out
# e.g.:  T, T, T, T, T, T, (F), F, F, F, F

class Solution:
    def firstBadVersion(self, n: int) -> int:
        left = 1
        right = n

        while(left < right):
            mid = (right + left) // 2 # can give overflow error in other languages, in java use left + (right-left) // 2
            if isBadVersion(mid): # the first bad version is either at mid or before
                    right = mid
            else: # the bad version is above mid, therefore the lower bound for our search should be set to mid + 1
                left = mid + 1
        return left
