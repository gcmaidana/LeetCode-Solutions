# Question link: https://leetcode.com/problems/out-of-boundary-paths/?envType=daily-question&envId=2024-01-26
# Video: https://www.youtube.com/watch?v=Bg5CLRqtNmk
# This video helped a lot, especially in terms of visualization


# Bottom up solution, optimized for space
# O(m*n)
class Solution:
    def findPaths(self, m: int, n: int, maxMove: int, startRow: int, startColumn: int) -> int:

        ROWS, COLS = m, n
        MOD = 10 ** 9 + 7

        grid = [[0] * COLS for r in range(ROWS)]

        for m in range(1, maxMove + 1):
            tmp = [[0] * COLS for r in range(ROWS)]
            for r in range(ROWS):
                for c in range(COLS):
                    # row or col +- 1 can out of bounds, so handle them individually

                    # ROWS
                    if r + 1 == ROWS:
                        tmp[r][c] = (tmp[r][c] + 1 % MOD)
                    else:
                        tmp[r][c] = (tmp[r][c] + grid[r+1][c]) % MOD
                    
                    if r - 1 < 0:
                        tmp[r][c] = (tmp[r][c] + 1 % MOD)
                    else:
                        tmp[r][c] = (tmp[r][c] + grid[r-1][c]) % MOD

                    # COLS
                    if c + 1 == COLS:
                        tmp[r][c] = (tmp[r][c] + 1 % MOD)
                    else:
                        tmp[r][c] = (tmp[r][c] + grid[r][c+1]) % MOD

                    if c - 1 < 0:
                        tmp[r][c] = (tmp[r][c] + 1 % MOD)
                    else:
                        tmp[r][c] = (tmp[r][c] + grid[r][c-1]) % MOD

            grid = tmp
        return grid[startRow][startColumn] 



# This is cache solution, but not optimized for space
# O(m*n*maxMoves)

class Solution:
    def findPaths(self, m: int, n: int, maxMove: int, startRow: int, startColumn: int) -> int:
        MOD = 10 ** 9 + 7
        rows, cols = m, n

        # store our result in cache so we can avoid re-calculations
        cache = {}
        def dfs(r, c, moves):
            if (r < 0 or r == rows or
                c < 0 or c == cols):
               return 1
            if moves == 0:
                return 0
            if (r, c, moves) in cache:
                return cache[(r, c, moves)]
            
            # We do the MOD in this format because overflow can be a concern
            # when adding the two results, it's not too problematic in python
            # but in other languages, this is how we would want to do it
            cache[(r, c, moves)] = (
                (dfs(r + 1, c, moves - 1) +
                 dfs(r - 1, c, moves - 1)) % MOD +
                (dfs(r, c + 1, moves - 1) + 
                 dfs(r, c - 1, moves - 1)) % MOD 
            ) % MOD
            return cache[(r, c, moves)]
  
        return dfs(startRow, startColumn, maxMove)
        
