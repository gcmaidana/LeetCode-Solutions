# Question link: https://leetcode.com/problems/palindromic-substrings/description/?envType=daily-question&envId=2024-02-10

# The way to approach this problem is to start a given character and expand outward in both directions to check if that is also a palindrome, etc.
# This cuts down on repeated work. The individual character before we expand obviously counts as a palindrome
# This video has a good visualization: https://leetcode.com/problems/palindromic-substrings/description/?envType=daily-question&envId=2024-02-10\
# Btw, there are various solutions to this problem, including a dp solution, but I don't want to go that direction.
# We need to start at even positions too because we expand (a)aab, we go out of bounds and don't account for the palindrome "aa"
# If lost still, look up and read up on Manacher's Algorithm

class Solution:
    def countSubstrings(self, s: str) -> int:

        ans = 0
        for i in range(len(s)):
            l = r = i
            while l >= 0 and r < len(s) and s[l] == s[r]:
                ans += 1
                l -=1
                r += 1 

            l = i
            r = i + 1
            while l >= 0 and r < len(s) and s[l] == s[r]:
                ans += 1
                l -=1
                r += 1 
        return ans


# 2nd solution, same as first, but it's more concise by using a function to avoid repeated work

class Solution:
    def countSubstrings(self, s: str) -> int:
        ans = 0
        
        for i in range(len(s)):
            l = r = i
            ans += self.countPali(s, l, r)
            
            l = i
            r = i + 1
            ans += self.countPali(s, l, r)
            
        return ans

 
    def countPali(self, s, l, r):
        ans = 0
        while l >= 0 and r < len(s) and s[l] == s[r]:
                ans += 1
                l -=1
                r += 1
        return ans
    

  
