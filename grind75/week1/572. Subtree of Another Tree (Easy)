# Very similar to this problem:
# https://leetcode.com/problems/same-tree/

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:

        # handle edge cases
        if not subRoot:
            return True
        if not root and subRoot:
            return False
        if self.sameTree(root, subRoot):
            return True

        # The entire subroot tree can be in the left or right subtree of root
        # so we want to use "or" and not "and" when doing this recursive call    
        return (self.isSubtree(root.left, subRoot) or
                self.isSubtree(root.right, subRoot))
        



    def sameTree(self, root, subRoot):
            
        if not root and not subRoot:
            return True

        if not root or not subRoot or root.val != subRoot.val:
            return False

        return ( # we want left and right sub tree to both return true
            self.sameTree(root.left, subRoot.left) and
            self.sameTree(root.right, subRoot.right)
            )
          


        
