class Solution:
    def findErrorNums(self, nums: List[int]) -> List[int]:
        previous = 0
        missing_num = 0
        repeat_num = 0
        my_set = {}
        for i in nums:
            
            if i in my_set:
                my_set[i] += 1
                repeat_num = i
                
            else:
                my_set[i] = 1
            
        for i in range(1, len(nums) + 1):
            if i not in my_set:
                missing_num = i

        
        return [repeat_num, missing_num]


# a clever approach using no extra memory
# https://www.youtube.com/watch?v=d-ulaeRBA64

class Solution:
    def findErrorNums(self, nums: List[int]) -> List[int]:

        res = [0, 0]

        for n in nums:
            n = abs(n)
            nums[n - 1] = -nums[n - 1]
            if nums[n - 1] > 0:
                res[0] = n
        
        for i, n in enumerate(nums):
            if n > 0 and i + 1 != res[0]:
                res[1] = i + 1
                return res

# mathematical approach
class Solution:
    def findErrorNums(self, nums: List[int]) -> List[int]:
        N = len(nums)
        x = 0 # duplicate - missing num
        y = 0 # duplicate^2 - missing^2

        for i in range(1, N + 1):
            x += nums[i - 1] - i
            y += nums[i - 1]**2 - i**2

        missing = (y - x**2) // (2 * x)
        duplicate = missing + x
        return[duplicate, missing]
