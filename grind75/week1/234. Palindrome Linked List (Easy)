# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

# The problem statement goes on to ask if the solution can be solved in O(n) time and O(1) space.
# This is my original solution in O(n) time but O(n) space, so this isn't optimal
class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:

        while head is not None:
            some_list.append(head.val)
            head = head.next

        l, r = 0, len(some_list) - 1 
        while l <= r:
            nums[l] != nums[r]:
                return False
            l += 1
            r -= 1
        return True

    # return some_list == some_list[::-1] - could reverse it like this, but I guess it's better to do the above to more manually check if it's a palindrome


# Optimal approach, O(N) time, O(1) space
#
