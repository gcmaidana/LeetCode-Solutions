# Question link: https://leetcode.com/problems/move-zeroes/description/

# So we have to modify the list without using extra space

# One problem I have is I had an initial solution like this below, but removing an element at a specific index is O(n) so in a for loop it's O(n^2) solution

class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        for index, number in enumerate(nums):
            if number == 0:
                nums.pop(index)
                nums.append(0)
                


# All non-zero values should end up on the left. So we start with a pointer on the left most position
# and when we encounter our first non-zero number, we place it at this position and add one to the variable
# so that now, the next non-zero number gets places into the new left position, etc, until we move all non-zero
# values into the left side of the list
class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """

        left = 0
        for right in range(len(nums)):
            if nums[right] != 0:
                nums[left], nums[right] = nums[right], nums[left]
                left += 1

