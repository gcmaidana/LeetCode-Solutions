# Question link: https://leetcode.com/problems/merge-two-sorted-lists/description/

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        merged_list = []
        # Handle cases where no merging is possible:
        # if list1 and list2 empty, return nothing
        # else if list1 empty, return list2 
        # else if list2 empty, return list1 
        if not list1 and not list2:
            return
        elif not list1:
            return list2
        elif not list2:
            return list1 


        # 1, 2, 4
        # 1, 3, 4

        # Basically, look at the head node of list1 and list2,
        # whichever is bigger gets added to the merged list
        # and after, delete the head node of the largest node and compare
        # the head nodes again
        dummy = ListNode()
        tail = dummy
        
        while list1 and list2:

            # if list1 and list2 not empty
            if list1 and list2:
                # if list1 has bigger value, append list2 val because we need to make the merged list
                # from smallest to greatest 
                if list1.val > list2.val:
                    print('case 1')
                    tail.next = list2
                    list2 = list2.next
               
                else:
                    # case two handles case when list2 has a value that is bigger, or theyre equal
                    # in either case, we add list1 value to the merge list
                    print('case 2')
                    tail.next = list1
                    list1 = list1.next
            tail = tail.next

        # if only list1 or list2 is remaining, we dont have to iterate through the LinkedList
        # just merge the entire list
        if list1:
            tail.next = list1
        elif list2:
            tail.next = list2

        
        return dummy.next
        
