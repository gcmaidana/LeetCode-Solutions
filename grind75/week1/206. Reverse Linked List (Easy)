# Question link: https://leetcode.com/problems/reverse-linked-list/description/
# This video has a good visualiztion for the 2nd or 3rd approach: https://www.youtube.com/watch?v=G0_I-ZF0S38

# 1. My original solution (I used a stack then popped from the stack in order to reverse the linkedlist) Not bad approach but it uses extra space when we don't need to

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        stackz = []
        while head is not None:
            stackz.append(head)
            head = head.next
            
        
        dummyNode = ListNode(0, None)
        current = dummyNode
        while stackz:
            current.next = stackz.pop()
            #print(current.next)
            current = current.next
            
        current.next = None
        print(current)
        return dummyNode.next


# 2. Two pointer solution (iterative approach)
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:

        # ITERATIVE
        # 1 -> 2 -> 3 -> 4 -> 5 -> NONE
        prev = None
        curr = head

        while curr != None:
            next_node = curr.next
            curr.next = prev
            prev = curr
            curr = next_node
        return prev


# 3. Recursive solution
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:

        # RECURSIVE
        def rec(prev, curr):
            if curr is None:
                return prev
            next_node = curr.next
            curr.next = prev
            prev = curr
            curr = next_node
            return rec(prev, curr)
        
        return rec(None, head)
