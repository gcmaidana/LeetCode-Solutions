class Solution:
    def maxLength(self, arr: List[str]) -> int:

        # seen is our set of characters we encountered in our concatenated string
        def backtrack(index, seen):
            # base case is when we hit the last index
            if index == len(arr):
                return len(seen)
            
            # edge case where we have "aa" or "bb"
            # we take the word and compare its len to the len of the set, if theyre not the same,
            # there was a duplicate
            s, new = arr[index], set(arr[index])

            if len(s) != len(new):
                return backtrack(index + 1, seen) 
            
            # ex: a, new set being bc.
            is_unique = len(seen) == len(seen.difference(new))

            return max(backtrack(index + 1, seen), backtrack(index + 1, seen.union(new))) if is_unique else backtrack(index + 1, seen) 

        return backtrack(0, set())
        
