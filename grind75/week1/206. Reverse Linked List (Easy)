# Question link: https://leetcode.com/problems/reverse-linked-list/description/
# This video has a good visualiztion for the 2nd or 3rd approach: https://www.youtube.com/watch?v=G0_I-ZF0S38

# 1. My original solution (I used a stack then popped from the stack in order to reverse the linkedlist

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        stackz = []
        while head is not None:
            stackz.append(head)
            head = head.next
            
        
        dummyNode = ListNode(0, None)
        current = dummyNode
        while stackz:
            current.next = stackz.pop()
            #print(current.next)
            current = current.next
            
        current.next = None
        print(current)
        return dummyNode.next


# 2. Two pointer solution
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        previous, current = None, head

        while current:
            next_cur = current.next # we need to save next node from the original list so we can use it
            current.next = previous
            previous = current
            current = next_cur
        return previous

# 3. Recursive solution
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:

        if not head:
            return None
        
        newHead = head
        if head.next:
            newHead = self.reverseList(head.next)
            head.next.next = head
        head.next = None
        return newHead


        
