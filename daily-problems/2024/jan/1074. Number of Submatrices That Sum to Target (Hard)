# Question link: https://leetcode.com/problems/number-of-submatrices-that-sum-to-target/description/?envType=daily-question&envId=2024-01-28

# This problem is similar to like a subarray problem, we can do the prefix sum to calculate subarrays more efficiently
# the difficulty here though is this isnt a subarray, its a matrix, so we have to handle rows, and columns
# with this mind though, there are certain optimizations we can make to reduce complexity and calculations

# its hard to visualize and discuss how to sum submatrix's through text, this video has good illustrations and visualizations for this probblem and it's extremely helpful to understand because the submatrix sums are illustrated
# Video: https://www.youtube.com/watch?v=43DRBP2DUHg

class Solution:
    def numSubmatrixSumTarget(self, matrix: List[List[int]], target: int) -> int:
        ROWS, COLS = len(matrix), len(matrix[0])
        sub_sum = [[0] * COLS for _ in range(ROWS)]

        for r in range(ROWS):
            for c in range(COLS):
                top = sub_sum[r - 1][c] if r > 0 else 0
                left = sub_sum[r][c - 1] if c > 0 else 0
                top_left = sub_sum[r - 1][c - 1] if min(r, c) > 0 else 0
                sub_sum[r][c] = matrix[r][c] + top + left  - top_left
        
        res = 0
        for r1 in range(ROWS):
            for r2 in range(r1, ROWS):
                count = defaultdict(int) # prefix_sum -> count
                count[0] = 1
                for c in range(COLS):
                    cur_sum = sub_sum[r2][c] - (sub_sum[r1 - 1][c] if r1 > 0 else 0)
                    diff = cur_sum - target
                    res += count[diff]
                    count[cur_sum] += 1                       
        return res
